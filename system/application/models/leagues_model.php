<?php
/**
 * This model should manages league office stuff
 *
 *@author Owen Jones (oj502) 
 *
 */
 
//////////////////////////////EDITING ACTUAL LEAGUES
class Leagues_model extends Model
{

	function __construct()
	{
		// Call the Model Constructor
		parent::Model();
		$this->load->library('wikiparser');
	}
	
	/**
	*Returns infomation about all the content_types that can have reviews
	**/
	function getLeagueContentTypes ()
	{
		$sql = '
		SELECT 
			content_types.content_type_id AS id,
			content_types.content_type_codename AS codename,
			content_types.content_type_name AS name
		FROM content_types
		WHERE content_types.content_type_has_reviews=1
		ORDER BY content_types.content_type_name ASC';
		$query = $this->db->query($sql);
		return $query->result_array();
	}
	
	//Returns true if the codename given is a valid league
	function doesCodenameExist($codename){
	$sql= '
	SELECT 
		leagues.league_id 
	FROM leagues 
	WHERE leagues.league_codename=? 
	LIMIT 1';
	$query = $this->db->query($sql,array($codename));
	return ($query->num_rows() > 0);
	}

	/**
	*Returns the league_codename from a league_id.
	*@param $id The league_id.
	**/
	function getLeagueCodename($id)
	{
		$sql = '
		SELECT league_codename
		FROM leagues
		WHERE league_id = ? 
		LIMIT 1';
		$query = $this->db->query($sql,array($id));
		$row = $query->row();
		return $row->league_codename;
	}
	
	/**
	*Returns infomation about all leagues.
	**/
	function getAllLeagues ($content_type_name="")
	{
		$result = array();
		$sql = '
		SELECT 
			leagues.league_id as id,
			leagues.league_name as name,
			leagues.league_codename as codename,
			leagues.league_size as size,
			leagues.league_autogenerated as autogenerated,
			images.image_id as image_id,
			image_types.image_type_codename as image_type,
			content_types.content_type_codename as section_codename,
			content_types.content_type_name as section_name,
			(
				SELECT COUNT(*) FROM league_entries WHERE league_entry_league_id=leagues.league_id
			) as current_size,
			(
				SELECT COUNT(*) FROM league_tags WHERE league_tags.league_tag_league_id=leagues.league_id
			) as number_of_tags
		FROM   leagues
		INNER JOIN      content_types
		ON      content_types.content_type_id = leagues.league_content_type_id
		LEFT OUTER JOIN      images
		ON      leagues.league_image_id = images.image_id
		LEFT OUTER JOIN      image_types
		ON      image_image_type_id = image_type_id ';
		if($content_type_name!=""){
			$sql .= '
			WHERE content_types.content_type_codename=? 
			ORDER BY content_types.content_type_name ASC,  leagues.league_order ASC';
			$query = $this->db->query($sql, $content_type_name);
		}else {
			$sql .= ' 
			ORDER BY content_types.content_type_name ASC,  leagues.league_order ASC';
			$query = $this->db->query($sql);
		}
		return $query->result_array();
	}
	
	//Creates a new content type
	//@param codename - string to use as codename a-z A-Z only
	//@param $name - string name
	//@param $section_id - id of parent content_type
	//@param $image_id - id of related image, should be a puffer
	//@param $size -  i have no idea what this does yet
	//@param $autogenerated - if the league is generated from user opinion (doubt you want to change default of 0)
	//NOTE Make sure the parent exists, and thecodename is not already taken!
	function insertLeague($codename,$name,$section_id,$image_id,$size,$autogenerated=0)
	{
		//Find order position to give
		$sql = '
		SELECT	MAX(league_order) as max_league_order
		FROM	leagues
		WHERE	league_content_type_id = ?';
		$query = $this->db->query($sql,array($section_id));
		if ($query->num_rows() > 0){
			$row = $query->row();
			$order = $row->max_league_order + 1;
		}else{
			$order = 1;
		}
		//Insert new league
		$sql = 'INSERT INTO leagues (
				league_image_id, 
				league_content_type_id, 
				league_name, 
				league_size, 
				league_autogenerated, 
				league_order,
				league_codename
				)
			VALUES (?, ?, ?, ?, ?, ?, ?)';
		$this->db->query($sql, array($image_id,$section_id,$name,$size,$autogenerated,$order,$codename));
	}
	
	//Updates an existing content type
	//@param $id - id of content type to change
	//@param codename - string to use as codename a-z A-Z only
	//@param $name - string name
	//@param $parent_id - id of parent content_type
	//@param $archive (0,1) if articlesubtype is shown in the archive
	//@param $blurb - String, description
	function updateLeague($id, $codename,$name,$section_id,$size,$autogenerated)
	{
		//Update type
		$sql = '
		UPDATE leagues SET 
			leagues.league_content_type_id = ?, 
			leagues.league_name = ?, 
			leagues.league_size = ?, 
			leagues.league_autogenerated = ?, 
			leagues.league_codename = ? 
		WHERE leagues.league_id = ? 
		LIMIT 1';
		$this->db->query($sql, array($section_id,$name,$size,$autogenerated,$codename,$id));
	}
	
	function updateLeagueImage($id,$image_id)
	{
		//Update type
		$sql = '
		UPDATE leagues SET 
			leagues.league_image_id = ? 
		WHERE leagues.league_id = ? 
		LIMIT 1';
		$this->db->query($sql, array($image_id,$id));
	}
	/**
	*Returns information about a particular league
	*@param $id This is the id of the league
	**/
	function getLeagueInformation($id)
	{
		$result = array();
		$sql = '
		SELECT  
			leagues.league_id as id,
			leagues.league_name as name,
			leagues.league_codename as codename,
			leagues.league_size as size,
			leagues.league_order as `order`,
			leagues.league_autogenerated as autogenerated,
			images.image_id as image_id,
			images.image_title as image_title,
			image_types.image_type_codename as image_type,
			content_types.content_type_id as section_id,
			content_types.content_type_codename as section_codename,
			content_types.content_type_name as section_name,
			(
				SELECT COUNT(*) FROM league_entries WHERE league_entry_league_id=leagues.league_id
			) as current_size,
			(
				SELECT COUNT(*) FROM league_tags WHERE league_tags.league_tag_league_id=leagues.league_id
			) as number_of_tags
		FROM   leagues
		INNER JOIN      content_types
		ON      content_types.content_type_id = leagues.league_content_type_id
		LEFT OUTER JOIN      images
		ON      leagues.league_image_id = images.image_id
		LEFT OUTER JOIN      image_types
		ON      image_image_type_id = image_type_id
		WHERE leagues.league_id = ? 
		ORDER BY section_name ASC, `order` ASC LIMIT 1';
		$query = $this->db->query($sql,array($id));
		return $query->row_array();
	}
	
	//Checks to see if the league group has a league of a certain position returns true if order position exists.
	//Use this to check if a swap is valid
	function DoesOrderPositionExist($section_id, $order_number)
	{
		$sql = '
		SELECT league_id 
		FROM leagues  
		WHERE 	league_content_type_id = ? AND league_order=? 
		LIMIT 1';
		$query = $this->db->query($sql,array($section_id, $order_number));
		return ($query->num_rows() > 0);
	}
	function SwapCategoryOrder($leaguepos_id_1, $leaguepos_id_2, $league_type)
	{
		$this->db->trans_start();
		$sql = 'SELECT	league_id
			FROM	leagues
			WHERE	league_order = ?
			AND		league_content_type_id = ?';
		$query = $this->db->query($sql,array($leaguepos_id_1, $league_type));
		$row = $query->row();
		$league_id_1 = $row->league_id;

		$sql = 'SELECT	league_id
			FROM	leagues
			WHERE	league_order = ?
			AND	league_content_type_id = ?';
		$query = $this->db->query($sql,array($leaguepos_id_2, $league_type));
		$row = $query->row();
		$league_id_2 = $row->league_id;

		$sql = 'UPDATE	leagues
			SET	league_order = ?
			WHERE league_id = ?';
		$query = $this->db->query($sql,array($leaguepos_id_2, $league_id_1));

		$sql = 'UPDATE	leagues
			SET	league_order = ?
			WHERE league_id = ?';
		$query = $this->db->query($sql,array($leaguepos_id_1, $league_id_2));
		$this->db->trans_complete();
	}
	
	function DeleteCategory($league_id, $section_id)
	{
		$this->db->trans_start();
		/////////////start reordering to be able to delete it
		$sql = 'SELECT league_order
			FROM leagues
			WHERE league_id = ?';
		$query = $this->db->query($sql,array($league_id));
		$row = $query->row();
		$league_order = $row->league_order;//Its order number

		$sql = 'SELECT	MAX(league_order) as max_league_order
			FROM	leagues
			WHERE	 league_content_type_id=?';
		$query = $this->db->query($sql,array($section_id));
		$row = $query->row();
		$max_league_order = $row->max_league_order;//The highest order number

		for($i = $league_order; $i < $max_league_order; $i++)
		{
			self::SwapCategoryOrder($i, $i + 1, $section_id);//keep swaping untill the highest
		}
		
		//can delete now its the highest
		$sql = 'DELETE FROM leagues 
				WHERE  leagues.league_id = ?  
				LIMIT 1';
		$query = $this->db->query($sql,array($league_id));
		$this->db->trans_complete();
	}

	function IsLeagueAutoGenerated($league_id){
		$sql='SELECT league_autogenerated FROM leagues WHERE league_id=?';
		$query = $this->db->query($sql,array($league_id));
		if($query->num_rows() > 0){
			return $query->row()->league_autogenerated;
		}else{
			return 0;
		}
	}
	
	function SelectAllLeaguesTags($league_id)
	{
		$sql = '
		SELECT 
			tags.tag_id,
			tags.tag_name,
			tag_groups.tag_group_id,
			tag_groups.tag_group_name
		FROM league_tags 
		INNER JOIN tags ON 
			league_tags.league_tag_tag_id = tags.tag_id
		INNER JOIN tag_groups ON
			tags.tag_tag_group_id = tag_groups.tag_group_id
		WHERE league_tags.league_tag_league_id=? 
		ORDER BY tag_groups.tag_group_name ASC, tags.tag_name ASC';
		$query = $this->db->query($sql,array($league_id));
		return $query->result_array();
	}
	
	function SelectAllNewTags($league_id)
	{
		//Get the content type id of the league
		$sql = 'SELECT league_content_type_id FROM leagues WHERE leagues.league_id=? LIMIT 1';
		$query = $this->db->query($sql,array($league_id));
		$content_type_id = $query->row()->league_content_type_id;
		
		$sql = '
		SELECT 
			tags.tag_id,
			tags.tag_name,
			tag_groups.tag_group_id,
			tag_groups.tag_group_name
		FROM tags 
		INNER JOIN tag_groups ON
			tags.tag_tag_group_id = tag_groups.tag_group_id
		WHERE NOT EXISTS 
		(
			SELECT * 
			FROM league_tags 
			WHERE league_tags.league_tag_league_id=? 
			AND league_tags.league_tag_tag_id = tags.tag_id
		)
		AND ( tag_groups.tag_group_content_type_id IS NULL OR tag_groups.tag_group_content_type_id = ? )
		ORDER BY tag_groups.tag_group_name ASC, tags.tag_name ASC';
		$query = $this->db->query($sql,array($league_id, $content_type_id));
		return $query->result_array();
	}
	
	function CreateLeagueTag($league_id,$tag_id)
	{
		$sql = 'INSERT INTO league_tags 
				(league_tag_league_id, league_tag_tag_id)
				VALUES
				(?, ?)';
		$query = $this->db->query($sql,array($league_id,$tag_id));
	}
	
	function RemoveLeagueTag($league_id,$tag_id)
	{
		$sql = 'DELETE FROM league_tags 
				WHERE  league_tags.league_tag_league_id = ? AND league_tags.league_tag_tag_id = ? 
				LIMIT 1';
		$query = $this->db->query($sql,array($league_id,$tag_id));
	}
	
	//////////////////////ADDING/REMOVING STUFF IN LEAGUES

	function GetLeagueMaxSize($league_id){
		$sql='SELECT league_size FROM leagues WHERE league_id=?';
		$query = $this->db->query($sql,array($league_id));
		if($query->num_rows() > 0){
			return $query->row()->league_size;
		}else{
			return null;
		}
	}
	function GetCurrentSizeOfLeague($league_id){
		$sql='SELECT COUNT(*) as current_size FROM league_entries WHERE league_entry_league_id=?';
		$query = $this->db->query($sql,array($league_id));
		if($query->num_rows() > 0){
			return $query->row()->current_size;
		}else{
			return 0;
		}
	}
	
	function GetVenuePositionInLeague($league_id, $venue_id)
	{
		$sql = '
		SELECT 
			league_entry_position AS venue_order 
		FROM league_entries  
		WHERE league_entry_league_id = ? AND league_entry_organisation_entity_id=? 
		LIMIT 1';
		$query = $this->db->query($sql,array($league_id, $venue_id));
		if($query->num_rows() > 0){
			return $query->row()->venue_order;
		}else{
			return null;
		}
	}
	
	function GetBasicVenuesFromLeague($league_id){
		$sql='
		SELECT 
			league_entries.league_entry_league_id as league_id,
			organisations.organisation_entity_id as id,
			organisations.organisation_name as name,
			organisations.organisation_directory_entry_name as codename,
			content_types.content_type_name as section_name,
			content_types.content_type_codename as section_codename
		FROM league_entries 
		INNER JOIN organisations ON 
			league_entries.league_entry_organisation_entity_id = organisations.organisation_entity_id
		INNER JOIN leagues ON
			league_entries.league_entry_league_id = leagues.league_id
		INNER JOIN content_types ON
			leagues.league_content_type_id = content_types.content_type_id 
		WHERE league_entries.league_entry_league_id =? 
		ORDER BY league_entries.league_entry_position ASC';
		$query = $this->db->query($sql,array($league_id));
		if($query->num_rows() > 0){
			return $query->result_array();
		}else{
			return array();
		}
	}
	
	function GetLeagueVenueSuggestions($league_id){
		$sql='
		SELECT
		    tags.tag_id,
		    tags.tag_name,
		    tag_groups.tag_group_id,
		    tag_groups.tag_group_name,
		    organisations.organisation_entity_id as venue_id,
		    organisations.organisation_directory_entry_name as venue_shortname,
		    organisations.organisation_name as venue_name,

			content_types.content_type_codename as section_codename,
			review_context_contents.review_context_content_rating as venue_rating
		FROM `league_tags`
		INNER JOIN `leagues` ON `league_tags`.`league_tag_league_id` = `leagues`.`league_id`
		INNER JOIN `tags` ON `league_tags`.`league_tag_tag_id` = `tags`.`tag_id`
		INNER JOIN `tag_groups` ON `tags`.`tag_tag_group_id` = `tag_groups`.`tag_group_id`
		INNER JOIN `organisation_tags` ON `league_tags`.`league_tag_tag_id` = `organisation_tags`.`organisation_tag_tag_id`
		INNER JOIN `organisations` ON `organisation_tags`.`organisation_tag_organisation_entity_id` = `organisations`.`organisation_entity_id`
		INNER JOIN `content_types` ON `leagues`.`league_content_type_id` = `content_types`.`content_type_id`
		INNER JOIN `review_contexts` ON
		    `organisations`.`organisation_entity_id` = `review_contexts`.`review_context_organisation_entity_id` AND
		    `review_contexts`.`review_context_content_type_id` = `leagues`.`league_content_type_id`
		LEFT JOIN `review_context_contents` ON `review_contexts`.`review_context_live_content_id` = `review_context_contents`.`review_context_content_id`
		WHERE `league_tag_league_id` = ?
		AND review_contexts.review_context_live_content_id IS NOT NULL
		AND review_contexts.review_context_deleted = 0
		AND review_contexts.review_context_content_type_id = leagues.league_content_type_id
		AND NOT EXISTS (
			SELECT *
			FROM league_entries 
			WHERE league_entries.league_entry_league_id =? 
			AND league_entries.league_entry_organisation_entity_id = organisations.organisation_entity_id
		)
		ORDER BY venue_name ASC
		';
		$query = $this->db->query($sql,array($league_id,$league_id));
		
		//The results are a list that can contain duplicate venues because they have more than one tag in common. (duplicates are grouped together)
		//This will push the duplicates tags into one row with the tags in an array
		$result = array();
		foreach ( $query->result_array() as $venue){
			//if there is a duplicate dont copy venue information again, just tag information
			if(!isset($result[$venue['venue_id']]))
			{
				$result[$venue['venue_id']] =
				array (
					'venue_id' => $venue['venue_id'],
					'venue_shortname' => $venue['venue_shortname'],
					'venue_name' => $venue['venue_name'],
					'venue_rating' => $venue['venue_rating'],
					'section_codename' => $venue['section_codename']
				);
			}
			//Copy the tag information if its a duplicate or not
			$result[$venue['venue_id']]['tags'][] =
			array(
					'tag_id' => $venue['tag_id'],
					'tag_name' => $venue['tag_name'],
					'tag_group_id' => $venue['tag_group_id'],
					'tag_group_name' => $venue['tag_group_name'],
				);
		}
		
		//Reorders the results by number of tags desc, rating desc, venue name asc
		function compare_tag_count($a, $b) { 
			if(count($a['tags']) == count($b['tags']))
			{
				if($a['venue_rating']==$b['venue_rating'])
				{
					return strcmp ($a['venue_name'], $b['venue_name']);
				}
				return ($a['venue_rating'] < $b['venue_rating']) ? 1 : -1;
			}			
			return (count($a['tags']) < count($b['tags'])) ? 1 : -1;
		}
		usort($result, 'compare_tag_count');
		return $result;
	}
	
	function DoesLeaguePositionExist($league_id, $order_number)
	{
		$sql = '
		SELECT league_entry_league_id 
		FROM league_entries  
		WHERE league_entry_league_id = ? AND league_entry_position=? 
		LIMIT 1';
		$query = $this->db->query($sql,array($league_id, $order_number));
		return ($query->num_rows() > 0);
	}
	
	function SwapLeagueOrder($category_id_1, $category_id_2, $league_id)
	{
		$this->db->trans_start();
		$sql = 'SELECT	league_entry_organisation_entity_id
			FROM	league_entries
			WHERE	league_entry_position = ?
			AND		league_entry_league_id = ?';
		$query = $this->db->query($sql,array($category_id_1, $league_id));
		$row = $query->row();
		$venue_id_1 = $row->league_entry_organisation_entity_id;
		
		$sql = 'SELECT	league_entry_organisation_entity_id
			FROM	league_entries
			WHERE	league_entry_position = ?
			AND		league_entry_league_id = ?';
		$query = $this->db->query($sql,array($category_id_2, $league_id));
		$row = $query->row();
		$venue_id_2 = $row->league_entry_organisation_entity_id;
		
		$sql = 'UPDATE	league_entries
			SET	league_entry_position = ?
			WHERE	league_entry_organisation_entity_id  = ?
			AND	league_entry_league_id = ?';
		$query = $this->db->query($sql,array($category_id_2, $venue_id_1, $league_id));

		$sql = 'UPDATE	league_entries
			SET	league_entry_position = ?
			WHERE	league_entry_organisation_entity_id  = ?
			AND	league_entry_league_id = ?';
		$query = $this->db->query($sql,array($category_id_1, $venue_id_2, $league_id));
		$this->db->trans_complete();
	}
	
	function AddToLeague($league_id, $org_id){
		$sql = '
		SELECT MAX(league_entry_position) as max_league_entry_position
		FROM league_entries
		WHERE league_entry_league_id = ?';
		$query = $this->db->query($sql,array($league_id));
		$row = $query->row();
		$max_league_entry_position = $row->max_league_entry_position;//The highest order number
		$sql = '
		INSERT INTO league_entries 
		(
			league_entry_league_id, 
			league_entry_organisation_entity_id, 
			league_entry_position
		)
		VALUES (?, ?, ?)';
		$query = $this->db->query($sql,array($league_id, $org_id, $max_league_entry_position + 1));
	}
	
	function RemoveFromLeague($league_id, $venue_id)
	{
		$this->db->trans_start();
		/////////////start reordering to be able to delete it
		$sql = 'SELECT	league_entry_position
			FROM	league_entries
			WHERE		league_entry_league_id = ? AND league_entry_organisation_entity_id=?';
		$query = $this->db->query($sql,array($league_id, $venue_id));
		$row = $query->row();
		$delete_section_order = $row->league_entry_position;//Its order number

		$sql = 'SELECT	MAX(league_entry_position) as max_league_entry_position
			FROM league_entries
			WHERE league_entry_league_id = ?';
		$query = $this->db->query($sql,array($league_id));
		$row = $query->row();
		$max_section_order = $row->max_league_entry_position;//The highest order number

		for($i = $delete_section_order; $i < $max_section_order; $i++)
		{
			self::SwapLeagueOrder($i, $i + 1, $league_id);//keep swaping untill the highest
		}
		
		//can delete now its the highest
		$sql = 'DELETE FROM league_entries 
				WHERE  league_entries.league_entry_league_id = ? AND league_entries.league_entry_organisation_entity_id=?
				LIMIT 1';
		$query = $this->db->query($sql,array($league_id, $venue_id));
		$this->db->trans_complete();
	}
	
	function GetVenuesLeagues($venue_id){
		$sql='
		SELECT 
			leagues.league_id as id,
			leagues.league_name as name,
			leagues.league_codename as codename,
			leagues.league_size as size,
			league_entries.league_entry_position as rank,
			content_types.content_type_id as section_id,
			content_types.content_type_codename as section_codename,
			content_types.content_type_name as section_name
		FROM league_entries 
		INNER JOIN leagues ON
			league_entries.league_entry_league_id = leagues.league_id
		INNER JOIN content_types ON
			leagues.league_content_type_id = content_types.content_type_id
		WHERE league_entry_organisation_entity_id=? 
		ORDER BY content_types.content_type_name ASC, leagues.league_order ASC';
		$query = $this->db->query($sql,array($venue_id));
		if($query->num_rows() > 0){
			return $query->result_array();
		}else{
			return array();
		}
	}
	
	function IsVenueInLeague($league_id, $venue_id)
	{
		$sql = '
		SELECT league_entry_position AS venue_order 
		FROM league_entries  
		WHERE league_entry_league_id = ? AND league_entry_organisation_entity_id=? 
		LIMIT 1';
		$query = $this->db->query($sql,array($league_id, $venue_id));
		if($query->num_rows() > 0){
			return true;
		}else{
			return false;
		}
	}
	
	function GetAllLeaguesSimple(){
		$sql='
		SELECT 
			leagues.league_id as id,
			leagues.league_name as name,
			leagues.league_codename as codename,
			content_types.content_type_id as section_id,
			content_types.content_type_codename as section_codename,
			content_types.content_type_name as section_name
		FROM leagues 
		INNER JOIN content_types ON
			leagues.league_content_type_id = content_types.content_type_id 
		ORDER BY content_types.content_type_name ASC, leagues.league_order ASC';
		$query = $this->db->query($sql);
		if($query->num_rows() > 0){
			return $query->result_array();
		}else{
			return array();
		}
	}
}
?>
