<?php
/**
 * This model should manages league office stuff
 *
 *@author Owen Jones (oj502) 
 *
 */
 
//////////////////////////////EDITING ACTUAL LEAGUES
class Leagues_model extends Model
{

	function __construct()
	{
		// Call the Model Constructor
		parent::Model();
		$this->load->library('wikiparser');
	}
	
	/**
	*Returns infomation about all the content_types that can have reviews
	**/
	function getLeagueContentTypes ()
	{
		$sql = 'SELECT  content_types.content_type_id AS id, content_types.content_type_codename AS codename,	content_types.content_type_name AS name
			FROM content_types
			WHERE content_types.content_type_has_reviews=1
			ORDER BY content_types.content_type_name ASC';
		$query = $this->db->query($sql);
		return $query->result_array();
	}
	
	//Returns true if the codename given is a valid league
	function doesCodenameExist($codename){
	$sql= "SELECT leagues.league_id FROM leagues WHERE leagues.league_codename=? LIMIT 1";
	$query = $this->db->query($sql,array($codename));
	return ($query->num_rows() > 0);
	}

	/**
	*Returns the league_codename from a league_id.
	*@param $id The league_id.
	**/
	function getLeagueCodename($id)
	{
		$sql = 'SELECT league_codename
				FROM leagues
				WHERE league_id = ? 
				LIMIT 1';
		$query = $this->db->query($sql,array($id));
		$row = $query->row();
		return $row->league_codename;
	}
	
	/**
	*Returns infomation about all leagues.
	**/
	function getAllLeagues ()
	{
		$result = array();
		$sql = 'SELECT  leagues.league_id,
						leagues.league_name,
						leagues.league_codename,
						leagues.league_size,
						leagues.league_autogenerated,
						images.image_id,
						image_types.image_type_codename,
						content_types.content_type_codename,
						content_types.content_type_name 
			FROM   leagues
			INNER JOIN      content_types
			ON      content_types.content_type_id = leagues.league_content_type_id
			LEFT OUTER JOIN      images
			ON      leagues.league_image_id = images.image_id
			LEFT OUTER JOIN      image_types
			ON      image_image_type_id = image_type_id
			ORDER BY        content_types.content_type_name ASC,  leagues.league_order ASC';
		$query = $this->db->query($sql);
		if ($query->num_rows() > 0)
		{
			foreach($query->result() as $row)
			{
				$result[] = array(
					'id' => $row->league_id,
					'name' => $row->league_name,
					'codename' => $row->league_codename,
					'size' => $row->league_size,
					'autogenerated' => $row->league_autogenerated,
					'image_id' => $row->image_id,
					'image_type' => $row->image_type_codename,
					'section_codename' => $row->content_type_codename,
					'section_name' => $row->content_type_name
				);
			}
		}
		return $result;
	}
	
	//Creates a new content type
	//@param codename - string to use as codename a-z A-Z only
	//@param $name - string name
	//@param $section_id - id of parent content_type
	//@param $image_id - id of related image, should be a puffer
	//@param $size -  i have no idea what this does yet
	//@param $autogenerated - if the league is generated from user opinion (doubt you want to change default of 0)
	//NOTE Make sure the parent exists, and thecodename is not already taken!
	function insertLeague($codename,$name,$section_id,$image_id,$size,$autogenerated=0)
	{
		//Find order position to give
		$sql = 'SELECT	MAX(league_order) as max_league_order
			FROM	leagues
			WHERE	league_content_type_id = ?';
		$query = $this->db->query($sql,array($section_id));
		if ($query->num_rows() > 0){
			$row = $query->row();
			$order = $row->max_league_order + 1;
		}else{
			$order = 1;
		}
		//Insert new league
		$sql = 'INSERT INTO leagues (
				league_image_id, 
				league_content_type_id, 
				league_name, 
				league_size, 
				league_autogenerated, 
				league_order,
				league_codename
				)
			VALUES (?, ?, ?, ?, ?, ?, ?)';
		$this->db->query($sql, array($image_id,$section_id,$name,$size,$autogenerated,$order,$codename));
	}
	
	//Updates an existing content type
	//@param $id - id of content type to change
	//@param codename - string to use as codename a-z A-Z only
	//@param $name - string name
	//@param $parent_id - id of parent content_type
	//@param $image_id - id of related image, should be a puffer
	//@param $archive (0,1) if articlesubtype is shown in the archive
	//@param $blurb - String, description
	function updateLeague($id, $codename,$name,$section_id,$image_id,$size,$autogenerated)
	{
		//Update type
		$sql = 'UPDATE leagues SET 
		leagues.league_image_id = ?, 
		leagues.league_content_type_id = ?, 
		leagues.league_name = ?, 
		leagues.league_size = ?, 
		leagues.league_autogenerated = ?, 
		leagues.league_codename = ? 
		WHERE leagues.league_id = ? 
		LIMIT 1';
		$this->db->query($sql, array($image_id,$section_id,$name,$size,$autogenerated,$codename,$id));
	}

	/**
	*Returns information about a particular league
	*@param $id This is the id of the league
	**/
	function getLeagueInformation($id)
	{
		$result = array();
		$sql = 'SELECT  leagues.league_id,
						leagues.league_name,
						leagues.league_codename,
						leagues.league_size,
						leagues.league_order,
						leagues.league_autogenerated,
						images.image_id,
						images.image_title,
						image_types.image_type_codename,
						content_types.content_type_id,
						content_types.content_type_codename,
						content_types.content_type_name 
			FROM   leagues
			INNER JOIN      content_types
			ON      content_types.content_type_id = leagues.league_content_type_id
			LEFT OUTER JOIN      images
			ON      leagues.league_image_id = images.image_id
			LEFT OUTER JOIN      image_types
			ON      image_image_type_id = image_type_id
			WHERE leagues.league_id = ? 
			ORDER BY        content_types.content_type_name ASC,  leagues.league_order ASC';
		$query = $this->db->query($sql,array($id));
		if ($query->num_rows() > 0)
		{
		$row = $query->row();
		$result = array(
			'id' => $row->league_id,
			'name' => $row->league_name,
			'codename' => $row->league_codename,
			'size' => $row->league_size,
			'order' => $row->league_order,
			'autogenerated' => $row->league_autogenerated,
			'image_id' => $row->image_id,
			'image_title' => $row->image_title,
			'image_type' => $row->image_type_codename,
			'section_id' => $row->content_type_id,
			'section_codename' => $row->content_type_codename,
			'section_name' => $row->content_type_name
		);
		}
		return $result;
	}
	
	//Checks to see if the league group has a league of a certain position returns true if order position exists.
	//Use this to check if a swap is valid
	function DoesOrderPositionExist($section_id, $order_number)
	{
		$sql = 'SELECT league_id FROM leagues  
				WHERE 	league_content_type_id = ? AND league_order=? LIMIT 1';
		$query = $this->db->query($sql,array($section_id, $order_number));
		return ($query->num_rows() > 0);
	}
	function SwapCategoryOrder($leaguepos_id_1, $leaguepos_id_2, $league_type)
	{
		$this->db->trans_start();
		$sql = 'SELECT	league_id
			FROM	leagues
			WHERE	league_order = ?
			AND		league_content_type_id = ?';
		$query = $this->db->query($sql,array($leaguepos_id_1, $league_type));
		$row = $query->row();
		$league_id_1 = $row->league_id;

		$sql = 'SELECT	league_id
			FROM	leagues
			WHERE	league_order = ?
			AND	league_content_type_id = ?';
		$query = $this->db->query($sql,array($leaguepos_id_2, $league_type));
		$row = $query->row();
		$league_id_2 = $row->league_id;

		$sql = 'UPDATE	leagues
			SET	league_order = ?
			WHERE league_id = ?';
		$query = $this->db->query($sql,array($leaguepos_id_2, $league_id_1));

		$sql = 'UPDATE	leagues
			SET	league_order = ?
			WHERE league_id = ?';
		$query = $this->db->query($sql,array($leaguepos_id_1, $league_id_2));
		$this->db->trans_complete();
	}
	
	function DeleteCategory($league_id, $section_id)
	{
		$this->db->trans_start();
		/////////////start reordering to be able to delete it
		$sql = 'SELECT league_order
			FROM leagues
			WHERE league_id = ?';
		$query = $this->db->query($sql,array($league_id));
		$row = $query->row();
		$league_order = $row->league_order;//Its order number

		$sql = 'SELECT	MAX(league_order) as max_league_order
			FROM	leagues
			WHERE	 league_content_type_id=?';
		$query = $this->db->query($sql,array($section_id));
		$row = $query->row();
		$max_league_order = $row->max_league_order;//The highest order number

		for($i = $league_order; $i < $max_league_order; $i++)
		{
			self::SwapCategoryOrder($i, $i + 1, $section_id);//keep swaping untill the highest
		}
		
		//can delete now its the highest
		$sql = 'DELETE FROM leagues 
				WHERE  leagues.league_id = ?  
				LIMIT 1';
		$query = $this->db->query($sql,array($league_id));
		$this->db->trans_complete();
	}

	function IsLeagueAutoGenerated($league_id){
	$sql='SELECT league_autogenerated FROM leagues WHERE league_id=?';
		$query = $this->db->query($sql,array($league_id));
		if($query->num_rows() > 0){
			return $query->row()->league_autogenerated;
		}else{
			return 0;
		}
	}
	//////////////////////ADDING/REMOVING STUFF IN LEAGUES

	function GetLeagueMaxSize($league_id){
		$sql='SELECT league_size FROM leagues WHERE league_id=?';
		$query = $this->db->query($sql,array($league_id));
		if($query->num_rows() > 0){
			return $query->row()->league_size;
		}else{
			return null;
		}
	}
	function GetCurrentSizeOfLeague($league_id){
		$sql='SELECT COUNT(*) as current_size FROM league_entries WHERE league_entry_league_id=?';
		$query = $this->db->query($sql,array($league_id));
		if($query->num_rows() > 0){
			return $query->row()->current_size;
		}else{
			return 0;
		}
	}
	
	function GetVenuePositionInLeague($league_id, $venue_id)
	{
		$sql = 'SELECT league_entry_position AS venue_order FROM league_entries  
				WHERE league_entry_league_id = ? AND   	league_entry_organisation_entity_id=? LIMIT 1';
		$query = $this->db->query($sql,array($league_id, $venue_id));
		if($query->num_rows() > 0){
			return $query->row()->venue_order;
		}else{
			return null;
		}
	}
	
	function GetBasicVenuesFromLeague($league_id){
		$sql='SELECT 
				league_entries.league_entry_league_id as league_id,
				organisations.organisation_entity_id as id,
				organisations.organisation_name as name,
				organisations.organisation_directory_entry_name as codename,
				content_types.content_type_name as section_name,
				content_types.content_type_codename as section_codename
				FROM league_entries 
				INNER JOIN organisations ON 
					league_entries.league_entry_organisation_entity_id = organisations.organisation_entity_id
				INNER JOIN leagues ON
					league_entries.league_entry_league_id = leagues.league_id
				INNER JOIN content_types ON
					leagues.league_content_type_id = content_types.content_type_id 
				WHERE league_entries.league_entry_league_id =? 
				ORDER BY league_entries.league_entry_position ASC';
		$query = $this->db->query($sql,array($league_id));
		if($query->num_rows() > 0){
			return $query->result_array();
		}else{
			return array();
		}
	}
	
	function DoesLeaguePositionExist($league_id, $order_number)
	{
		$sql = 'SELECT league_entry_league_id FROM league_entries  
				WHERE league_entry_league_id = ? AND league_entry_position=? LIMIT 1';
		$query = $this->db->query($sql,array($league_id, $order_number));
		return ($query->num_rows() > 0);
	}
	
	function SwapLeagueOrder($category_id_1, $category_id_2, $league_id)
	{
		$this->db->trans_start();
		$sql = 'SELECT	league_entry_organisation_entity_id
			FROM	league_entries
			WHERE	league_entry_position = ?
			AND		league_entry_league_id = ?';
		$query = $this->db->query($sql,array($category_id_1, $league_id));
		$row = $query->row();
		$venue_id_1 = $row->league_entry_organisation_entity_id;
		
		$sql = 'SELECT	league_entry_organisation_entity_id
			FROM	league_entries
			WHERE	league_entry_position = ?
			AND		league_entry_league_id = ?';
		$query = $this->db->query($sql,array($category_id_2, $league_id));
		$row = $query->row();
		$venue_id_2 = $row->league_entry_organisation_entity_id;
		
		$sql = 'UPDATE	league_entries
			SET	league_entry_position = ?
			WHERE	league_entry_organisation_entity_id  = ?
			AND	league_entry_league_id = ?';
		$query = $this->db->query($sql,array($category_id_2, $venue_id_1, $league_id));

		$sql = 'UPDATE	league_entries
			SET	league_entry_position = ?
			WHERE	league_entry_organisation_entity_id  = ?
			AND	league_entry_league_id = ?';
		$query = $this->db->query($sql,array($category_id_1, $venue_id_2, $league_id));
		$this->db->trans_complete();
	}
	
	function AddToLeague($league_id, $org_id){
			$sql = 'SELECT	MAX(league_entry_position) as max_league_entry_position
				FROM league_entries
				WHERE league_entry_league_id = ?';
			$query = $this->db->query($sql,array($league_id));
			$row = $query->row();
			$max_league_entry_position = $row->max_league_entry_position;//The highest order number
			$sql = 'INSERT INTO league_entries (
					league_entry_league_id, 
					league_entry_organisation_entity_id, 
					league_entry_position)
				VALUES (?, ?, ?)';
			$query = $this->db->query($sql,array($league_id, $org_id, $max_league_entry_position + 1));
	}
	
	function RemoveFromLeague($league_id, $venue_id)
	{
		$this->db->trans_start();
		/////////////start reordering to be able to delete it
		$sql = 'SELECT	league_entry_position
			FROM	league_entries
			WHERE		league_entry_league_id = ? AND league_entry_organisation_entity_id=?';
		$query = $this->db->query($sql,array($league_id, $venue_id));
		$row = $query->row();
		$delete_section_order = $row->league_entry_position;//Its order number

		$sql = 'SELECT	MAX(league_entry_position) as max_league_entry_position
			FROM league_entries
			WHERE league_entry_league_id = ?';
		$query = $this->db->query($sql,array($league_id));
		$row = $query->row();
		$max_section_order = $row->max_league_entry_position;//The highest order number

		for($i = $delete_section_order; $i < $max_section_order; $i++)
		{
			self::SwapLeagueOrder($i, $i + 1, $league_id);//keep swaping untill the highest
		}
		
		//can delete now its the highest
		$sql = 'DELETE FROM league_entries 
				WHERE  league_entries.league_entry_league_id = ? AND league_entries.league_entry_organisation_entity_id=?
				LIMIT 1';
		$query = $this->db->query($sql,array($league_id, $venue_id));
		$this->db->trans_complete();
	}
	
	function GetVenuesLeagues($venue_id){
		$sql='SELECT 
				leagues.league_id as id,
				leagues.league_name as name,
				leagues.league_codename as codename,
				leagues.league_size as size,
				league_entries.league_entry_position as rank,
				content_types.content_type_id as section_id,
				content_types.content_type_codename as section_codename,
				content_types.content_type_name as section_name
				FROM league_entries 
				INNER JOIN leagues ON
					league_entries.league_entry_league_id = leagues.league_id
				INNER JOIN content_types ON
					leagues.league_content_type_id = content_types.content_type_id
				WHERE league_entry_organisation_entity_id=? 
				ORDER BY content_types.content_type_name ASC, leagues.league_order ASC';
		$query = $this->db->query($sql,array($venue_id));
		if($query->num_rows() > 0){
			return $query->result_array();
		}else{
			return array();
		}
	}
	
	function IsVenueInLeague($league_id, $venue_id)
	{
		$sql = 'SELECT league_entry_position AS venue_order FROM league_entries  
				WHERE league_entry_league_id = ? AND league_entry_organisation_entity_id=? LIMIT 1';
		$query = $this->db->query($sql,array($league_id, $venue_id));
		if($query->num_rows() > 0){
			return true;
		}else{
			return false;
		}
	}
	
	function GetAllLeaguesSimple(){
		$sql='SELECT 
				leagues.league_id as id,
				leagues.league_name as name,
				leagues.league_codename as codename,
				content_types.content_type_id as section_id,
				content_types.content_type_codename as section_codename,
				content_types.content_type_name as section_name
				
				FROM leagues 
				INNER JOIN content_types ON
					leagues.league_content_type_id = content_types.content_type_id 
				ORDER BY content_types.content_type_name ASC, leagues.league_order ASC';
		$query = $this->db->query($sql);
		if($query->num_rows() > 0){
			return $query->result_array();
		}else{
			return array();
		}
	}
}
?>
